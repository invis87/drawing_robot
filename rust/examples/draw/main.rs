#![allow(unused_parens)]

use skulpin::AppControl;
use skulpin::CoordinateSystemHelper;
use skulpin::InputState;
use skulpin::LogicalSize;
use skulpin::TimeState;
use skulpin::VirtualKeyCode;
use skulpin::{AppHandler, CoordinateSystem};
use std::ffi::CString;

use drawing_robot::svg::svg_curve::{Point, points_from_path_segments, LineTo};
use std::collections::LinkedList;

fn points_to_draw() -> Box<dyn Iterator<Item =LineTo>> {
    let svg_string = "M212.182,587.076h6.219c17.621,0,30.682,10.885,39.186,32.653c10.156,0,17.104,8.504,20.836,25.501
					c-2.074,10.161-4.252,15.238-6.531,15.238H156.826c-4.771-5.18-7.152-10.263-7.152-15.238v-6.53
					c0-13.684,8.188-23.014,24.566-27.989c3.111,0,6.113-3.003,9.02-9.019C192.59,591.95,202.23,587.076,212.182,587.076z
					 M177.662,622.528c-9.539,0-15.238,6.327-17.104,18.971v0.933c1.242,3.732,1.865,5.807,1.865,6.22h102.314
					c1.244,0,1.865-0.622,1.865-1.866v-1.555c0-9.329-6.637-14.82-19.902-16.482c0-14.305-8.193-24.257-24.568-29.854
					c-3.318-0.622-5.705-0.933-7.152-0.933c-13.27,0-23.223,8.192-29.855,24.567H177.662z M627.971,298.169
					c3.936,0,6.633,10.574,8.086,31.721c1.865,16.794,3.109,25.813,3.732,27.057c16.996-6.011,26.016-9.019,27.055-9.019
					c4.768,0,7.152,9.951,7.152,29.854c17.416-4.767,36.488-9.534,57.223-14.306c2.9,0.831,4.354,2.906,4.354,6.22l-21.77,53.49
					c21.77,1.243,32.654,3.318,32.654,6.22v1.865c0,1.866-2.387,9.126-7.152,21.77v0.933c18.863,5.598,33.066,16.482,42.605,32.653
					c9.119,15.759,13.684,28.718,13.684,38.874c25.912,21.146,38.873,45.612,38.873,73.393v10.885
					c0,16.171-4.875,31.618-14.617,46.337h-47.893v1.555c8.5,14.515,12.752,25.71,12.752,33.587v6.22
					c-1.867,10.364-7.051,15.549-15.551,15.549H599.672c-1.041,0-1.557-0.622-1.557-1.865v-9.019
					c0-12.439,8.086-21.77,24.258-27.989c2.488-0.622,4.977-0.933,7.463-0.933h6.221c1.244,0,3.625-5.7,7.152-17.104H306.41
					c-16.379-20.107-24.568-43.742-24.568-70.905c0-43.951,21.148-78.68,63.441-104.181c16.377-8.911,34.52-13.372,54.424-13.372
					h7.152c0-1.035,0.621-2.901,1.865-5.598c-11.404-22.183-17.104-34.209-17.104-36.074v-0.934c0-3.313,9.33-6.011,27.988-8.085
					c-9.748-27.989-15.758-46.129-18.037-54.423c0-1.866,1.76-3.732,5.287-5.598l56.289,20.836v-0.622
					c1.244-18.863,3.625-28.3,7.152-28.3h1.865c1.658,0,9.535,3.318,23.635,9.951c9.121-37.94,14.82-56.91,17.105-56.91h4.354
					c4.559,4.563,14.305,18.455,29.232,41.672h0.934c8.498-15.131,14.82-22.702,18.971-22.702h0.932
					c6.424,5.807,12.129,12.751,17.105,20.837h1.865c18.24-22.183,31.512-36.697,39.807-43.539H627.971z M626.105,533.586v0.934
					c10.154,6.22,15.238,14.723,15.238,25.501c0,1.244-0.52,1.865-1.555,1.865h-7.465l-7.152-13.683
					c-6.842-6.011-13.168-9.019-18.971-9.019h-5.598c-15.549,3.527-23.324,10.16-23.324,19.902v0.934
					c6.633,10.16,9.953,19.801,9.953,28.922v1.865c0,1.244-0.623,1.866-1.867,1.866h-7.152c-0.83,0-3.318-7.255-7.463-21.77
					c-10.992-15.131-23.947-22.701-38.873-22.701c-20.322,0-34.52,11.506-42.605,34.52c-0.418,6.638-1.352,9.951-2.799,9.951h-8.086
					c-1.244,0-1.867-0.622-1.867-1.866c0-10.364,3.625-20.627,10.885-30.787c-6.219-25.914-17.623-45.507-34.207-58.776
					c-19.904-14.51-40.119-21.77-60.643-21.77c-25.502,0-50.59,12.959-75.26,38.873c-15.758,21.147-23.635,43.747-23.635,67.796
					c0,22.391,6.322,42.09,18.971,59.087h338.043c11.195-18.241,28.09-27.366,50.689-27.366c25.084,0,45.92,9.125,62.51,27.366
					h48.824c7.254-11.608,10.885-25.501,10.885-41.672c0-28.611-12.959-52.45-38.873-71.527c0-27.988-15.76-50.38-47.271-67.173
					c-11.613-3.523-21.254-5.287-28.922-5.287h-3.73c-32.762,0-56.91,17.211-72.461,51.624c-2.488,14.928-4.252,22.391-5.287,22.391
					H626.105z M405.926,430.339c3.314,6.429,6.012,12.546,8.086,18.348h1.867c1.033-3.936,5.285-10.884,12.75-20.836v-0.933
					C417.225,429.202,409.658,430.339,405.926,430.339z M416.811,373.428c8.5,23.014,13.994,38.98,16.482,47.893l27.988-27.989
					V389.6L416.811,373.428z M418.678,471.078c29.436,9.747,50.895,25.189,64.373,46.337c8.912,16.793,13.373,27.367,13.373,31.721
					h0.934c10.363-7.877,20.938-11.817,31.719-11.817h5.6c9.742,0,20.938,3.94,33.586,11.817v-0.933
					c7.668-13.888,19.693-20.837,36.074-20.837c1.244,0,5.803,0.622,13.684,1.866V528.3c0-26.536,14.406-49.447,43.227-68.729
					c14.51-7.877,29.646-11.817,45.404-11.817c-34.627-52.658-81.377-78.99-140.254-78.99c-46.445,0-87.184,19.388-122.219,58.154
					c-14.928,19.281-23.742,34.005-26.434,44.16H418.678z M460.35,457.706h0.932c6.842,0,10.779,4.771,11.818,14.305
					c-1.244,3.732-3.732,5.598-7.463,5.598h-11.508c-4.975-0.413-7.463-2.59-7.463-6.53
					C447.701,462.166,452.264,457.706,460.35,457.706z M461.281,462.992v1.866c0.205,1.244,0.826,1.866,1.867,1.866h0.932
					c1.035,0,1.557-0.622,1.557-1.866v-1.866c0-1.244-0.521-1.866-1.557-1.866h-0.932
					C461.904,461.335,461.281,461.957,461.281,462.992z M476.52,364.409c-0.621,1.662-1.451,7.673-2.486,18.038
					c1.035,0.621,1.865,0.933,2.486,0.933c2.902-2.07,9.535-5.389,19.904-9.952v-1.865
					C485.641,366.796,479.008,364.409,476.52,364.409z M517.26,321.805c-7.672,29.028-11.506,44.68-11.506,46.959h0.621
					c5.598-2.279,15.652-5.287,30.166-9.019c0-1.448,0.826-3.212,2.488-5.287v-1.866
					C525.346,332.067,518.086,321.805,517.26,321.805z M518.193,479.475h0.932c2.488,3.527,5.803,5.287,9.951,5.287
					c3.314,0,6.012-1.76,8.086-5.287h0.934c1.244,0.209,1.865,0.729,1.865,1.555c0,5.598-3.939,8.396-11.816,8.396
					c-7.674-0.825-11.508-3.833-11.508-9.019L518.193,479.475z M621.439,318.072c0,1.662-11.404,14.412-34.207,38.252h-4.666
					l-17.104-20.215c0,1.04-3.631,6.531-10.885,16.482v1.866c1.244,1.453,1.865,2.595,1.865,3.421c2.488,0,5.803-0.312,9.953-0.933
					c18.449,0,35.656,2.799,51.623,8.396l9.951-4.665l-4.664-42.605H621.439z M599.672,458.639h0.932
					c7.877,1.866,11.818,5.704,11.818,11.507v3.731c-1.453,3.109-3.84,4.665-7.152,4.665h-9.953c-6.016,0-9.018-2.799-9.018-8.396
					C586.299,463.926,590.754,460.092,599.672,458.639z M593.451,463.926v2.799l3.732,0.933l1.865-2.799
					c-0.621-1.244-0.934-2.177-0.934-2.799h-2.799C594.074,462.269,593.451,462.891,593.451,463.926z M642.275,687.524
					c-1.865-1.034-5.494-2.177-10.883-3.421c-14.516,2.906-21.77,8.917-21.77,18.038h152.383c7.877,0,11.818-2.692,11.818-8.086
					c-6.43-24.879-17.002-42.707-31.721-53.49c-12.648-7.254-26.23-10.884-40.74-10.884h-1.865
					c-23.432,0-40.016,14.203-49.758,42.604C646.631,682.447,644.143,687.524,642.275,687.524z M640.721,373.428
					c8.912,4.15,16.377,8.397,22.393,12.751v-0.933c-0.623-15.132-1.453-22.702-2.488-22.702
					c-13.271,3.527-19.904,6.22-19.904,8.085V373.428z M670.576,390.532c8.707,6.842,19.281,16.794,31.721,29.854
					c2.9-8.085,8.912-22.283,18.037-42.604L670.576,390.532z M712.248,435.004c4.977,10.16,10.055,15.238,15.238,15.238
					c0-0.826,1.867-5.287,5.598-13.373C725.621,435.626,718.672,435.004,712.248,435.004z";

    let path_parser = svgtypes::PathParser::from(svg_string);
    let path_segments = path_parser.filter_map(Result::ok).into_iter();

    points_from_path_segments(path_segments)
}

fn main() {
    let example_app = ExampleApp::new();

    // Set up the coordinate system to be fixed at 900x600, and use this as the default window size
    // This means the drawing code can be written as though the window is always 900x600. The
    // output will be automatically scaled so that it's always visible.
    let logical_size = LogicalSize::new(1000.0, 1000.0);
    let visible_range = skulpin::skia_safe::Rect {
        left: 0.0,
        right: logical_size.width as f32,
        top: 0.0,
        bottom: logical_size.height as f32,
    };
    let scale_to_fit = skulpin::skia_safe::matrix::ScaleToFit::Center;

    skulpin::AppBuilder::new()
        .app_name(CString::new("Debug drawing").unwrap())
        .use_vulkan_debug_layer(true)
        .logical_size(logical_size)
        .coordinate_system(CoordinateSystem::VisibleRange(visible_range, scale_to_fit))
        .run(example_app);
}

struct ExampleApp {
    points_to_draw: LinkedList<LineTo>
}

impl ExampleApp {
    pub fn new() -> Self {
        let mut linked_list = LinkedList::new();
        for point in points_to_draw() {
            linked_list.push_back(point)
        }
        ExampleApp {
            points_to_draw: linked_list
        }
    }
}

impl AppHandler for ExampleApp {
    fn update(
        &mut self,
        app_control: &mut AppControl,
        input_state: &InputState,
        _time_state: &TimeState,
    ) {
        if input_state.is_key_down(VirtualKeyCode::Escape) {
            app_control.enqueue_terminate_process();
        }
    }

    fn draw(
        &mut self,
        _app_control: &AppControl,
        _input_state: &InputState,
        _time_state: &TimeState,
        canvas: &mut skia_safe::Canvas,
        _coordinate_system_helper: &CoordinateSystemHelper,
    ) {
        // Generally would want to clear data every time we draw
        canvas.clear(skia_safe::Color::from_argb(0, 0, 0, 255));

        // Make a color to draw with
        let mut paint = skia_safe::Paint::new(skia_safe::Color4f::new(1., 0., 0., 1.0), None);
        paint.set_anti_alias(true);
        paint.set_style(skia_safe::paint::Style::Stroke);
        paint.set_stroke_width(2.0);

        // Draw SVG
        let mut prev_point: Point = Point { x: 0.0, y: 0.0 };
        for points in self.points_to_draw.iter() {
            match points {
                LineTo::Fly(point) => {
                    prev_point = point.clone()
                },

                LineTo::Draw(point) => {
                    canvas.draw_line(
                        skia_safe::Point::new(prev_point.x as f32, prev_point.y as f32),
                        skia_safe::Point::new(point.x as f32, point.y as f32),
                        &paint,
                    );
                    prev_point = point.clone();
                },

                LineTo::Erase(_) => {},
            }
        }
    }

    fn fatal_error(&mut self, error: &skulpin::AppError) {
        println!("{}", error);
    }
}
